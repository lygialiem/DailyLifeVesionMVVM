//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `daily.jpg`.
    static let dailyJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "daily", pathExtension: "jpg")
    
    /// `bundle.url(forResource: "daily", withExtension: "jpg")`
    static func dailyJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dailyJpg
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 48 images.
  struct image {
    /// Image `Arts`.
    static let arts = Rswift.ImageResource(bundle: R.hostingBundle, name: "Arts")
    /// Image `Business`.
    static let business = Rswift.ImageResource(bundle: R.hostingBundle, name: "Business")
    /// Image `Entertainment`.
    static let entertainment = Rswift.ImageResource(bundle: R.hostingBundle, name: "Entertainment")
    /// Image `Food`.
    static let food = Rswift.ImageResource(bundle: R.hostingBundle, name: "Food")
    /// Image `General`.
    static let general = Rswift.ImageResource(bundle: R.hostingBundle, name: "General")
    /// Image `Health`.
    static let health = Rswift.ImageResource(bundle: R.hostingBundle, name: "Health")
    /// Image `Opinion`.
    static let opinion = Rswift.ImageResource(bundle: R.hostingBundle, name: "Opinion")
    /// Image `Politics`.
    static let politics = Rswift.ImageResource(bundle: R.hostingBundle, name: "Politics")
    /// Image `Science`.
    static let science = Rswift.ImageResource(bundle: R.hostingBundle, name: "Science")
    /// Image `Solar Gradients10`.
    static let solarGradients10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Solar Gradients10")
    /// Image `Solar Gradients11`.
    static let solarGradients11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Solar Gradients11")
    /// Image `Solar Gradients12`.
    static let solarGradients12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Solar Gradients12")
    /// Image `Solar Gradients13`.
    static let solarGradients13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Solar Gradients13")
    /// Image `Solar Gradients14`.
    static let solarGradients14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Solar Gradients14")
    /// Image `Solar Gradients15`.
    static let solarGradients15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Solar Gradients15")
    /// Image `Solar Gradients16`.
    static let solarGradients16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Solar Gradients16")
    /// Image `Solar Gradients1`.
    static let solarGradients1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Solar Gradients1")
    /// Image `Solar Gradients2`.
    static let solarGradients2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Solar Gradients2")
    /// Image `Solar Gradients3`.
    static let solarGradients3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Solar Gradients3")
    /// Image `Solar Gradients4`.
    static let solarGradients4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Solar Gradients4")
    /// Image `Solar Gradients5`.
    static let solarGradients5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Solar Gradients5")
    /// Image `Solar Gradients6`.
    static let solarGradients6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Solar Gradients6")
    /// Image `Solar Gradients7`.
    static let solarGradients7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Solar Gradients7")
    /// Image `Solar Gradients8`.
    static let solarGradients8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Solar Gradients8")
    /// Image `Solar Gradients9`.
    static let solarGradients9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Solar Gradients9")
    /// Image `Sports`.
    static let sports = Rswift.ImageResource(bundle: R.hostingBundle, name: "Sports")
    /// Image `Style`.
    static let style = Rswift.ImageResource(bundle: R.hostingBundle, name: "Style")
    /// Image `Technology`.
    static let technology = Rswift.ImageResource(bundle: R.hostingBundle, name: "Technology")
    /// Image `Travel`.
    static let travel = Rswift.ImageResource(bundle: R.hostingBundle, name: "Travel")
    /// Image `World`.
    static let world = Rswift.ImageResource(bundle: R.hostingBundle, name: "World")
    /// Image `apixuLogo`.
    static let apixuLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "apixuLogo")
    /// Image `daily.jpg`.
    static let dailyJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "daily.jpg")
    /// Image `daily`.
    static let daily = Rswift.ImageResource(bundle: R.hostingBundle, name: "daily")
    /// Image `darkSkyLogo`.
    static let darkSkyLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "darkSkyLogo")
    /// Image `greenLikeButton`.
    static let greenLikeButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "greenLikeButton")
    /// Image `greenPlus`.
    static let greenPlus = Rswift.ImageResource(bundle: R.hostingBundle, name: "greenPlus")
    /// Image `heartSketch`.
    static let heartSketch = Rswift.ImageResource(bundle: R.hostingBundle, name: "heartSketch")
    /// Image `homeSketch`.
    static let homeSketch = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeSketch")
    /// Image `move`.
    static let move = Rswift.ImageResource(bundle: R.hostingBundle, name: "move")
    /// Image `moveright`.
    static let moveright = Rswift.ImageResource(bundle: R.hostingBundle, name: "moveright")
    /// Image `noImage`.
    static let noImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "noImage")
    /// Image `redLikeButton`.
    static let redLikeButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "redLikeButton")
    /// Image `refresh`.
    static let refresh = Rswift.ImageResource(bundle: R.hostingBundle, name: "refresh")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `shareButton`.
    static let shareButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "shareButton")
    /// Image `umbrella`.
    static let umbrella = Rswift.ImageResource(bundle: R.hostingBundle, name: "umbrella")
    /// Image `weatherIcon`.
    static let weatherIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "weatherIcon")
    /// Image `worldClock`.
    static let worldClock = Rswift.ImageResource(bundle: R.hostingBundle, name: "worldClock")
    
    /// `UIImage(named: "Arts", bundle: ..., traitCollection: ...)`
    static func arts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arts, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Business", bundle: ..., traitCollection: ...)`
    static func business(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.business, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Entertainment", bundle: ..., traitCollection: ...)`
    static func entertainment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.entertainment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Food", bundle: ..., traitCollection: ...)`
    static func food(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.food, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "General", bundle: ..., traitCollection: ...)`
    static func general(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.general, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Health", bundle: ..., traitCollection: ...)`
    static func health(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.health, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Opinion", bundle: ..., traitCollection: ...)`
    static func opinion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.opinion, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Politics", bundle: ..., traitCollection: ...)`
    static func politics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.politics, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Science", bundle: ..., traitCollection: ...)`
    static func science(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.science, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Solar Gradients1", bundle: ..., traitCollection: ...)`
    static func solarGradients1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solarGradients1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Solar Gradients10", bundle: ..., traitCollection: ...)`
    static func solarGradients10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solarGradients10, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Solar Gradients11", bundle: ..., traitCollection: ...)`
    static func solarGradients11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solarGradients11, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Solar Gradients12", bundle: ..., traitCollection: ...)`
    static func solarGradients12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solarGradients12, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Solar Gradients13", bundle: ..., traitCollection: ...)`
    static func solarGradients13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solarGradients13, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Solar Gradients14", bundle: ..., traitCollection: ...)`
    static func solarGradients14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solarGradients14, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Solar Gradients15", bundle: ..., traitCollection: ...)`
    static func solarGradients15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solarGradients15, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Solar Gradients16", bundle: ..., traitCollection: ...)`
    static func solarGradients16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solarGradients16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Solar Gradients2", bundle: ..., traitCollection: ...)`
    static func solarGradients2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solarGradients2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Solar Gradients3", bundle: ..., traitCollection: ...)`
    static func solarGradients3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solarGradients3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Solar Gradients4", bundle: ..., traitCollection: ...)`
    static func solarGradients4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solarGradients4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Solar Gradients5", bundle: ..., traitCollection: ...)`
    static func solarGradients5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solarGradients5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Solar Gradients6", bundle: ..., traitCollection: ...)`
    static func solarGradients6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solarGradients6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Solar Gradients7", bundle: ..., traitCollection: ...)`
    static func solarGradients7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solarGradients7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Solar Gradients8", bundle: ..., traitCollection: ...)`
    static func solarGradients8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solarGradients8, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Solar Gradients9", bundle: ..., traitCollection: ...)`
    static func solarGradients9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solarGradients9, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Sports", bundle: ..., traitCollection: ...)`
    static func sports(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sports, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Style", bundle: ..., traitCollection: ...)`
    static func style(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.style, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Technology", bundle: ..., traitCollection: ...)`
    static func technology(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.technology, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Travel", bundle: ..., traitCollection: ...)`
    static func travel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.travel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "World", bundle: ..., traitCollection: ...)`
    static func world(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.world, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "apixuLogo", bundle: ..., traitCollection: ...)`
    static func apixuLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.apixuLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "daily", bundle: ..., traitCollection: ...)`
    static func daily(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.daily, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "daily.jpg", bundle: ..., traitCollection: ...)`
    static func dailyJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dailyJpg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "darkSkyLogo", bundle: ..., traitCollection: ...)`
    static func darkSkyLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.darkSkyLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "greenLikeButton", bundle: ..., traitCollection: ...)`
    static func greenLikeButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenLikeButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "greenPlus", bundle: ..., traitCollection: ...)`
    static func greenPlus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenPlus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heartSketch", bundle: ..., traitCollection: ...)`
    static func heartSketch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heartSketch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "homeSketch", bundle: ..., traitCollection: ...)`
    static func homeSketch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeSketch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "move", bundle: ..., traitCollection: ...)`
    static func move(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.move, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "moveright", bundle: ..., traitCollection: ...)`
    static func moveright(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moveright, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "noImage", bundle: ..., traitCollection: ...)`
    static func noImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "redLikeButton", bundle: ..., traitCollection: ...)`
    static func redLikeButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.redLikeButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "refresh", bundle: ..., traitCollection: ...)`
    static func refresh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shareButton", bundle: ..., traitCollection: ...)`
    static func shareButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shareButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "umbrella", bundle: ..., traitCollection: ...)`
    static func umbrella(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.umbrella, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "weatherIcon", bundle: ..., traitCollection: ...)`
    static func weatherIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.weatherIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "worldClock", bundle: ..., traitCollection: ...)`
    static func worldClock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.worldClock, compatibleWith: traitCollection)
    }
    
    /// This `R.image.day` struct is generated, and contains static references to 1 images.
    struct day {
      /// Image `Sun`.
      static let sun = Rswift.ImageResource(bundle: R.hostingBundle, name: "day/Sun")
      
      /// `UIImage(named: "Sun", bundle: ..., traitCollection: ...)`
      static func sun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.day.sun, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.hourlyDay` struct is generated, and contains static references to 9 images.
    struct hourlyDay {
      /// Image `clear-day`.
      static let clearDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "hourlyDay/clear-day")
      /// Image `clear-night`.
      static let clearNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "hourlyDay/clear-night")
      /// Image `cloudy`.
      static let cloudy = Rswift.ImageResource(bundle: R.hostingBundle, name: "hourlyDay/cloudy")
      /// Image `fog`.
      static let fog = Rswift.ImageResource(bundle: R.hostingBundle, name: "hourlyDay/fog")
      /// Image `partly-cloudy-day`.
      static let partlyCloudyDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "hourlyDay/partly-cloudy-day")
      /// Image `partly-cloudy-night`.
      static let partlyCloudyNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "hourlyDay/partly-cloudy-night")
      /// Image `rain`.
      static let rain = Rswift.ImageResource(bundle: R.hostingBundle, name: "hourlyDay/rain")
      /// Image `sleet`.
      static let sleet = Rswift.ImageResource(bundle: R.hostingBundle, name: "hourlyDay/sleet")
      /// Image `snow`.
      static let snow = Rswift.ImageResource(bundle: R.hostingBundle, name: "hourlyDay/snow")
      
      /// `UIImage(named: "clear-day", bundle: ..., traitCollection: ...)`
      static func clearDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.hourlyDay.clearDay, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "clear-night", bundle: ..., traitCollection: ...)`
      static func clearNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.hourlyDay.clearNight, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "cloudy", bundle: ..., traitCollection: ...)`
      static func cloudy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.hourlyDay.cloudy, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "fog", bundle: ..., traitCollection: ...)`
      static func fog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.hourlyDay.fog, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "partly-cloudy-day", bundle: ..., traitCollection: ...)`
      static func partlyCloudyDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.hourlyDay.partlyCloudyDay, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "partly-cloudy-night", bundle: ..., traitCollection: ...)`
      static func partlyCloudyNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.hourlyDay.partlyCloudyNight, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "rain", bundle: ..., traitCollection: ...)`
      static func rain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.hourlyDay.rain, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "sleet", bundle: ..., traitCollection: ...)`
      static func sleet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.hourlyDay.sleet, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "snow", bundle: ..., traitCollection: ...)`
      static func snow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.hourlyDay.snow, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.hourlyNight` struct is generated, and contains static references to 9 images.
    struct hourlyNight {
      /// Image `clear-day`.
      static let clearDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "hourlyNight/clear-day")
      /// Image `clear-night`.
      static let clearNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "hourlyNight/clear-night")
      /// Image `cloudy`.
      static let cloudy = Rswift.ImageResource(bundle: R.hostingBundle, name: "hourlyNight/cloudy")
      /// Image `fog`.
      static let fog = Rswift.ImageResource(bundle: R.hostingBundle, name: "hourlyNight/fog")
      /// Image `partly-cloudy-day`.
      static let partlyCloudyDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "hourlyNight/partly-cloudy-day")
      /// Image `partly-cloudy-night`.
      static let partlyCloudyNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "hourlyNight/partly-cloudy-night")
      /// Image `rain`.
      static let rain = Rswift.ImageResource(bundle: R.hostingBundle, name: "hourlyNight/rain")
      /// Image `sleet`.
      static let sleet = Rswift.ImageResource(bundle: R.hostingBundle, name: "hourlyNight/sleet")
      /// Image `snow`.
      static let snow = Rswift.ImageResource(bundle: R.hostingBundle, name: "hourlyNight/snow")
      
      /// `UIImage(named: "clear-day", bundle: ..., traitCollection: ...)`
      static func clearDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.hourlyNight.clearDay, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "clear-night", bundle: ..., traitCollection: ...)`
      static func clearNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.hourlyNight.clearNight, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "cloudy", bundle: ..., traitCollection: ...)`
      static func cloudy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.hourlyNight.cloudy, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "fog", bundle: ..., traitCollection: ...)`
      static func fog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.hourlyNight.fog, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "partly-cloudy-day", bundle: ..., traitCollection: ...)`
      static func partlyCloudyDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.hourlyNight.partlyCloudyDay, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "partly-cloudy-night", bundle: ..., traitCollection: ...)`
      static func partlyCloudyNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.hourlyNight.partlyCloudyNight, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "rain", bundle: ..., traitCollection: ...)`
      static func rain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.hourlyNight.rain, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "sleet", bundle: ..., traitCollection: ...)`
      static func sleet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.hourlyNight.sleet, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "snow", bundle: ..., traitCollection: ...)`
      static func snow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.hourlyNight.snow, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.night` struct is generated, and contains static references to 1 images.
    struct night {
      /// Image `moon`.
      static let moon = Rswift.ImageResource(bundle: R.hostingBundle, name: "night/moon")
      
      /// `UIImage(named: "moon", bundle: ..., traitCollection: ...)`
      static func moon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.night.moon, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `DetailForecastCell`.
    static let detailForecastCell = _R.nib._DetailForecastCell()
    /// Nib `SmallArticleCell`.
    static let smallArticleCell = _R.nib._SmallArticleCell()
    
    /// `UINib(name: "DetailForecastCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailForecastCell) instead")
    static func detailForecastCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailForecastCell)
    }
    
    /// `UINib(name: "SmallArticleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.smallArticleCell) instead")
    static func smallArticleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.smallArticleCell)
    }
    
    static func detailForecastCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailForecastCelll? {
      return R.nib.detailForecastCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailForecastCelll
    }
    
    static func smallArticleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SmallArticleCell? {
      return R.nib.smallArticleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SmallArticleCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 31 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CellOfArticles`.
    static let cellOfArticles: Rswift.ReuseIdentifier<PageCell> = Rswift.ReuseIdentifier(identifier: "CellOfArticles")
    /// Reuse identifier `CellOfSideMenu`.
    static let cellOfSideMenu: Rswift.ReuseIdentifier<SideMenuCell> = Rswift.ReuseIdentifier(identifier: "CellOfSideMenu")
    /// Reuse identifier `CityCell`.
    static let cityCell: Rswift.ReuseIdentifier<WorldClockCell> = Rswift.ReuseIdentifier(identifier: "CityCell")
    /// Reuse identifier `DetailForecastCell`.
    static let detailForecastCell: Rswift.ReuseIdentifier<DetailForecastCelll> = Rswift.ReuseIdentifier(identifier: "DetailForecastCell")
    /// Reuse identifier `FirstCell`.
    static let firstCell: Rswift.ReuseIdentifier<ContentCell> = Rswift.ReuseIdentifier(identifier: "FirstCell")
    /// Reuse identifier `ReadingFavortiteCell`.
    static let readingFavortiteCell: Rswift.ReuseIdentifier<ReadingFavoriteReadingCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ReadingFavortiteCell")
    /// Reuse identifier `SmallArticleCell`.
    static let smallArticleCell: Rswift.ReuseIdentifier<SmallArticleCell> = Rswift.ReuseIdentifier(identifier: "SmallArticleCell")
    /// Reuse identifier `cell0`.
    static let cell0: Rswift.ReuseIdentifier<CityForecastCell> = Rswift.ReuseIdentifier(identifier: "cell0")
    /// Reuse identifier `cell1`.
    static let cell1: Rswift.ReuseIdentifier<ForecastHourTableViewCell> = Rswift.ReuseIdentifier(identifier: "cell1")
    /// Reuse identifier `cell2`.
    static let cell2: Rswift.ReuseIdentifier<DailyForecastCell> = Rswift.ReuseIdentifier(identifier: "cell2")
    /// Reuse identifier `cell3`.
    static let cell3: Rswift.ReuseIdentifier<SummaryForecastCell> = Rswift.ReuseIdentifier(identifier: "cell3")
    /// Reuse identifier `cellNext`.
    static let cellNext: Rswift.ReuseIdentifier<HourlyForecastCell> = Rswift.ReuseIdentifier(identifier: "cellNext")
    /// Reuse identifier `cellNow`.
    static let cellNow: Rswift.ReuseIdentifier<HourlyForecastCell> = Rswift.ReuseIdentifier(identifier: "cellNow")
    /// Reuse identifier `cell`.
    static let cell: Rswift.ReuseIdentifier<UIKit.UIView> = Rswift.ReuseIdentifier(identifier: "cell")
    /// Reuse identifier `cityListCell`.
    static let cityListCell: Rswift.ReuseIdentifier<listCityNameCell> = Rswift.ReuseIdentifier(identifier: "cityListCell")
    /// Reuse identifier `collectionCell`.
    static let collectionCell: Rswift.ReuseIdentifier<dailyForecastByGPSCell> = Rswift.ReuseIdentifier(identifier: "collectionCell")
    /// Reuse identifier `dailyForecast`.
    static let dailyForecast: Rswift.ReuseIdentifier<DailyForecaseSearch> = Rswift.ReuseIdentifier(identifier: "dailyForecast")
    /// Reuse identifier `dateCell`.
    static let dateCell: Rswift.ReuseIdentifier<DetailForecastCell> = Rswift.ReuseIdentifier(identifier: "dateCell")
    /// Reuse identifier `detailCell`.
    static let detailCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "detailCell")
    /// Reuse identifier `detailTitle`.
    static let detailTitle: Rswift.ReuseIdentifier<Title_Sumary_Daily_Forecast> = Rswift.ReuseIdentifier(identifier: "detailTitle")
    /// Reuse identifier `header1`.
    static let header1: Rswift.ReuseIdentifier<SearchForecast> = Rswift.ReuseIdentifier(identifier: "header1")
    /// Reuse identifier `header2`.
    static let header2: Rswift.ReuseIdentifier<SearchForecast> = Rswift.ReuseIdentifier(identifier: "header2")
    /// Reuse identifier `header3`.
    static let header3: Rswift.ReuseIdentifier<SearchForecast> = Rswift.ReuseIdentifier(identifier: "header3")
    /// Reuse identifier `header4`.
    static let header4: Rswift.ReuseIdentifier<SearchForecast> = Rswift.ReuseIdentifier(identifier: "header4")
    /// Reuse identifier `header5`.
    static let header5: Rswift.ReuseIdentifier<SearchForecast> = Rswift.ReuseIdentifier(identifier: "header5")
    /// Reuse identifier `header`.
    static let header: Rswift.ReuseIdentifier<listCityNameCell> = Rswift.ReuseIdentifier(identifier: "header")
    /// Reuse identifier `readingHorizoneCell`.
    static let readingHorizoneCell: Rswift.ReuseIdentifier<ReadingCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "readingHorizoneCell")
    /// Reuse identifier `section1`.
    static let section1: Rswift.ReuseIdentifier<SearchForecast> = Rswift.ReuseIdentifier(identifier: "section1")
    /// Reuse identifier `sumaryCell`.
    static let sumaryCell: Rswift.ReuseIdentifier<Title_Sumary_Daily_Forecast> = Rswift.ReuseIdentifier(identifier: "sumaryCell")
    /// Reuse identifier `summaryCell`.
    static let summaryCell: Rswift.ReuseIdentifier<DetailForecastCell> = Rswift.ReuseIdentifier(identifier: "summaryCell")
    /// Reuse identifier `titleCell`.
    static let titleCell: Rswift.ReuseIdentifier<Title_Sumary_Daily_Forecast> = Rswift.ReuseIdentifier(identifier: "titleCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 5 view controllers.
  struct segue {
    /// This struct is generated for `FavoriteVC`, and contains static references to 1 segues.
    struct favoriteVC {
      /// Segue identifier `ToFavoriteReading`.
      static let toFavoriteReading: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FavoriteVC, ReadingFavoriteArticle> = Rswift.StoryboardSegueIdentifier(identifier: "ToFavoriteReading")
      
      /// Optionally returns a typed version of segue `ToFavoriteReading`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toFavoriteReading(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FavoriteVC, ReadingFavoriteArticle>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.favoriteVC.toFavoriteReading, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MainVC`, and contains static references to 2 segues.
    struct mainVC {
      /// Segue identifier `GPSForecast`.
      static let gpsForecast: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainVC, ForecastGPS> = Rswift.StoryboardSegueIdentifier(identifier: "GPSForecast")
      /// Segue identifier `ToPageVC`.
      static let toPageVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainVC, PageVC> = Rswift.StoryboardSegueIdentifier(identifier: "ToPageVC")
      
      /// Optionally returns a typed version of segue `GPSForecast`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func gpsForecast(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainVC, ForecastGPS>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainVC.gpsForecast, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ToPageVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toPageVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainVC, PageVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainVC.toPageVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `PageVC`, and contains static references to 1 segues.
    struct pageVC {
      /// Segue identifier `ToReadingVC`.
      static let toReadingVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PageVC, ReadingVC> = Rswift.StoryboardSegueIdentifier(identifier: "ToReadingVC")
      
      /// Optionally returns a typed version of segue `ToReadingVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toReadingVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PageVC, ReadingVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.pageVC.toReadingVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ReadingVC`, and contains static references to 1 segues.
    struct readingVC {
      /// Segue identifier `ToWebView`.
      static let toWebView: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ReadingVC, WebViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ToWebView")
      
      /// Optionally returns a typed version of segue `ToWebView`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toWebView(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ReadingVC, WebViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.readingVC.toWebView, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `WorldClockVC`, and contains static references to 1 segues.
    struct worldClockVC {
      /// Segue identifier `listCities`.
      static let listCities: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, WorldClockVC, ListCityTableVC> = Rswift.StoryboardSegueIdentifier(identifier: "listCities")
      
      /// Optionally returns a typed version of segue `listCities`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func listCities(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, WorldClockVC, ListCityTableVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.worldClockVC.listCities, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _SmallArticleCell.validate()
    }
    
    struct _DetailForecastCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DetailForecastCelll
      
      let bundle = R.hostingBundle
      let identifier = "DetailForecastCell"
      let name = "DetailForecastCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailForecastCelll? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailForecastCelll
      }
      
      fileprivate init() {}
    }
    
    struct _SmallArticleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SmallArticleCell
      
      let bundle = R.hostingBundle
      let identifier = "SmallArticleCell"
      let name = "SmallArticleCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SmallArticleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SmallArticleCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "noImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'noImage' is used in nib 'SmallArticleCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "daily.jpg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'daily.jpg' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HomeVC
      
      let bundle = R.hostingBundle
      let forecastLocationTableVC = StoryboardViewControllerResource<ForecastGPS>(identifier: "ForecastLocationTableVC")
      let listCityTableVC = StoryboardViewControllerResource<ListCityTableVC>(identifier: "ListCityTableVC")
      let name = "Main"
      let pageControllerID = StoryboardViewControllerResource<PageVC>(identifier: "PageControllerID")
      let readingFavoriteArticle = StoryboardViewControllerResource<ReadingFavoriteArticle>(identifier: "ReadingFavoriteArticle")
      let readingVC = StoryboardViewControllerResource<ReadingVC>(identifier: "ReadingVC")
      let searchVC = StoryboardViewControllerResource<SearchVC>(identifier: "SearchVC")
      let weatherVC = StoryboardViewControllerResource<ForecastVC>(identifier: "WeatherVC")
      let webViewVC = StoryboardViewControllerResource<WebViewController>(identifier: "WebViewVC")
      
      func forecastLocationTableVC(_: Void = ()) -> ForecastGPS? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forecastLocationTableVC)
      }
      
      func listCityTableVC(_: Void = ()) -> ListCityTableVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: listCityTableVC)
      }
      
      func pageControllerID(_: Void = ()) -> PageVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pageControllerID)
      }
      
      func readingFavoriteArticle(_: Void = ()) -> ReadingFavoriteArticle? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: readingFavoriteArticle)
      }
      
      func readingVC(_: Void = ()) -> ReadingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: readingVC)
      }
      
      func searchVC(_: Void = ()) -> SearchVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchVC)
      }
      
      func weatherVC(_: Void = ()) -> ForecastVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: weatherVC)
      }
      
      func webViewVC(_: Void = ()) -> WebViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: webViewVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "10", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '10' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Solar Gradients1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Solar Gradients1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Travel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Travel' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "apixuLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'apixuLogo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "darkSkyLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'darkSkyLogo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "day/176", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'day/176' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "greenPlus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'greenPlus' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "heartSketch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heartSketch' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "homeSketch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'homeSketch' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hourlyDay/rain", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hourlyDay/rain' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "move", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'move' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "moveright", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'moveright' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "noImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'noImage' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "redLikeButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'redLikeButton' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "refresh", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'refresh' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shareButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shareButton' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "umbrella", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'umbrella' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "worldClock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'worldClock' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().forecastLocationTableVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forecastLocationTableVC' could not be loaded from storyboard 'Main' as 'ForecastGPS'.") }
        if _R.storyboard.main().listCityTableVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'listCityTableVC' could not be loaded from storyboard 'Main' as 'ListCityTableVC'.") }
        if _R.storyboard.main().pageControllerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pageControllerID' could not be loaded from storyboard 'Main' as 'PageVC'.") }
        if _R.storyboard.main().readingFavoriteArticle() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'readingFavoriteArticle' could not be loaded from storyboard 'Main' as 'ReadingFavoriteArticle'.") }
        if _R.storyboard.main().readingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'readingVC' could not be loaded from storyboard 'Main' as 'ReadingVC'.") }
        if _R.storyboard.main().searchVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchVC' could not be loaded from storyboard 'Main' as 'SearchVC'.") }
        if _R.storyboard.main().weatherVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'weatherVC' could not be loaded from storyboard 'Main' as 'ForecastVC'.") }
        if _R.storyboard.main().webViewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'webViewVC' could not be loaded from storyboard 'Main' as 'WebViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
